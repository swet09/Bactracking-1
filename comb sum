// Time Complexity :recursive backtracking - O(2^n) exponential 
// Space Complexity : recursive backtracking - O(2^n) or number of solutions
// Did this code successfully run on Leetcode :
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
recurvise backtracking 
class Solution {
    List<List<Integer>> result;
    
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        
        result = new ArrayList<>();
        
        if(candidates == null || candidates.length == 0)
            return result;
        
        helper(candidates, target, 0, new ArrayList<>(),0);
        return result;
        
    }
    
    private void helper(int[] candidates, int target, int index, List<Integer> path, int level)
    {
       //System.out.println(level);
        //base
        if(target < 0 ||index == candidates.length )
            return;
        
        if(target == 0)
        {
            
            result.add(new ArrayList<>(path));
            return;
        }
        
        
        //logic
       //not choose
        helper(candidates, target, index+1, path, level+1);
        //choose
        path.add(candidates[index]);
        //System.out.println(path);
        helper(candidates, target-candidates[index], index, path, level+1);
        path.remove(path.size()-1);
    }
}

iterative backtracking 
class Solution {
    List<List<Integer>> result;
    
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        
        result = new ArrayList<>();
        
        if(candidates == null || candidates.length == 0)
            return result;
        
        helper(candidates, target, 0, new ArrayList<>());
        System.out.println(result.size());
        return result;
        
    }
    
    private void helper(int[] candidates, int target, int index, List<Integer> path)
    {
        //base
        if(target < 0 )
            return;
        
        if(target == 0)
        {
            
            result.add( new ArrayList<>(path));
            return;
        }
        
        
        //logic
      System.out.println(" target = "+target +" path = "+path);
        System.out.print(" index = "+index);
        for(int i=index; i<candidates.length; i++)
        {
            path.add(candidates[i]);
           // System.out.println("path called = "+path);
             System.out.println(" i = "+i+" candidates[i] = "+ candidates[i]+" target = "+target +" path = "+path);
            System.out.println(" ");
            helper(candidates, target-candidates[i], i, path);
            path.remove(path.size()-1);
            //helper(candidates, target, index+1, path);
           
        }
        
    }
}
